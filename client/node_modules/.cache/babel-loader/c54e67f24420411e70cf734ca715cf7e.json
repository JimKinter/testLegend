{"ast":null,"code":"'use strict';\n\nif (typeof module !== 'undefined') module.exports = simpleheat;\n\nfunction simpleheat(canvas) {\n  if (!(this instanceof simpleheat)) return new simpleheat(canvas);\n  this._canvas = canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;\n  this._ctx = canvas.getContext('2d');\n  this._width = canvas.width;\n  this._height = canvas.height;\n  this._max = 1;\n  this._data = [];\n}\n\nsimpleheat.prototype = {\n  defaultRadius: 25,\n  defaultGradient: {\n    0.4: 'blue',\n    0.6: 'cyan',\n    0.7: 'lime',\n    0.8: 'yellow',\n    1.0: 'red'\n  },\n  data: function data(_data) {\n    this._data = _data;\n    return this;\n  },\n  max: function max(_max) {\n    this._max = _max;\n    return this;\n  },\n  add: function add(point) {\n    this._data.push(point);\n\n    return this;\n  },\n  clear: function clear() {\n    this._data = [];\n    return this;\n  },\n  radius: function radius(r, blur) {\n    blur = blur === undefined ? 15 : blur; // create a grayscale blurred circle image that we'll use for drawing points\n\n    var circle = this._circle = this._createCanvas(),\n        ctx = circle.getContext('2d'),\n        r2 = this._r = r + blur;\n\n    circle.width = circle.height = r2 * 2;\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n    return this;\n  },\n  resize: function resize() {\n    this._width = this._canvas.width;\n    this._height = this._canvas.height;\n  },\n  gradient: function gradient(grad) {\n    // create a 256x1 gradient that we'll use to turn a grayscale heatmap into a colored one\n    var canvas = this._createCanvas(),\n        ctx = canvas.getContext('2d'),\n        gradient = ctx.createLinearGradient(0, 0, 0, 256);\n\n    canvas.width = 1;\n    canvas.height = 256;\n\n    for (var i in grad) {\n      gradient.addColorStop(+i, grad[i]);\n    }\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 1, 256);\n    this._grad = ctx.getImageData(0, 0, 1, 256).data;\n    return this;\n  },\n  draw: function draw(minOpacity) {\n    if (!this._circle) this.radius(this.defaultRadius);\n    if (!this._grad) this.gradient(this.defaultGradient);\n    var ctx = this._ctx;\n    ctx.clearRect(0, 0, this._width, this._height); // draw a grayscale heatmap by putting a blurred circle at each data point\n\n    for (var i = 0, len = this._data.length, p; i < len; i++) {\n      p = this._data[i];\n      ctx.globalAlpha = Math.max(p[2] / this._max, minOpacity === undefined ? 0.05 : minOpacity);\n      ctx.drawImage(this._circle, p[0] - this._r, p[1] - this._r);\n    } // colorize the heatmap, using opacity value of each pixel to get the right color from our gradient\n\n\n    var colored = ctx.getImageData(0, 0, this._width, this._height);\n\n    this._colorize(colored.data, this._grad);\n\n    ctx.putImageData(colored, 0, 0);\n    return this;\n  },\n  _colorize: function _colorize(pixels, gradient) {\n    for (var i = 0, len = pixels.length, j; i < len; i += 4) {\n      j = pixels[i + 3] * 4; // get gradient color from opacity value\n\n      if (j) {\n        pixels[i] = gradient[j];\n        pixels[i + 1] = gradient[j + 1];\n        pixels[i + 2] = gradient[j + 2];\n      }\n    }\n  },\n  _createCanvas: function _createCanvas() {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else {\n      // create a new canvas instance in node.js\n      // the canvas class needs to have a default constructor without any parameter\n      return new this._canvas.constructor();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}